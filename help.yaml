msg:
- to view information about something,
- enter the help query from which you can see that option
- followed by its given abbreviation
- e.g,
- 
  - '"h x" to see help message about expression queries'
  - '"h x p" to see help message about expression query patterns'
  - etc.

- name: bot
  abbr: b
  msg:
  - runs an automated game of wordle using the given answer and evaluator
  - e.g., "b positional crest"
  -
    - to see how a bot making guesses from the top of the positional evaluator
    - would play a game where "crest" was the answer

- name: guess
  abbr: g
  msg: 
  - updates the set of possible words and all derived values
  - based on the information Wordle gives after a word is guessed
  - then prints the number of words remaining as options
  - name: structure
    abbr: s
    msg:
    - '"g", followed by the word you guessed, followed by the result of that guess'
    - e.g., "g slice bbbgy"
  - name: colors
    abbr: c
    msg:
    - "the 2nd argument of g (the guess' result) allows only 3 types of characters:"
    -
      - "\"b\" (blank) the letter guessed in that slot doesn't occur anywhere in the target word"
      - '"y" (yellow) the letter guessed in that slot occurs in a different slot in the target word'
      - '"g" (green) the letter guessed in that slot occurs in that slot in the target word'

- name: letter
  abbr: l
  msg:
  - get data about a letter of the alphabet
  - name: single argument
    abbr: '1'
    msg:
    - pass a single letter as an argument to see its distribution, i.e.,
    -
      - total frequency,
      - frequency in each slot,
      - and letters sorted by how often they precede and follow it (# represents a word boundary)
    - e.g, "l e" to see data for "e"
  - name: zero argument
    abbr: '0'
    msg:
    - pass no argument to see data for all letters, i.e.,
    -
      - total frequency & frequency in each slot
    - e.g., "l"
- name: quit
  abbr: q
  msg:
  - quits the application

- name: state
  abbr: s
  msg:
  - shows history of guess queries or reverts them
  - pass no arguments to see history
  - pass either a number of guesses or a guessed word to revert
  -
    - if a word is passed, reverts to right before that word was guessed
    - if a number is passed, removes that many entries

- name: restrict
  abbr: r
  msg:
  - updates the set of possible words and all derived values
  - to exclude words that don't match the given pattern
  - name: patterns
    abbr: p
    msg:
    - 'patterns consist of:'
    -
      - normal letters
      - special tokens that match more general word elements
      - quantifiers
    - name: special tokens
      abbr: s
      msg:
      - name: generic
        abbr: _
        msg:
        - matches any letter
      - name: vowel
        abbr: '@'
        msg:
        - matches any vowel
        - '"a", "e", "i", "o", "u", and "y" are all vowels'
      - name: consonant
        abbr: $
        msg:
        - matches any consonant
        - any letter other than "a", "e", "i", "o", or "u" is a consonant
        - including "y"
      - name: word boundary
        abbr: '#'
        msg:
        - matches the beginning or end of a word
    - name: quantifiers
      abbr: q
      msg:
      - quantifiers cause the preceding token to match different numbers of instances
      -
        - '^: 0 or 1'
        - '&: 1 or more'
        - '*: 0 or more'

- name: evaluator
  abbr: v
  msg:
  - get a list of words from an evaluator
  - name: ranked
    abbr: k
    msg:
    - pass an evaluator name followed by, 
    -
      - a number of words to fetch,
      - optionally 
      -
        - an number to offset the fetch by from the end of the list,
        - a "-" if you want to fetch from the bottom instead of the top
    - e.g., "v positional 10 5 -" to see the bottom 15 words minus the bottom 5 per the positional evaluator
  - name: range
    abbr: g
    msg:
    - pass a range to see results for all words within that range
    -
      - range boundaries can be specified by either numerical score or a word itself
      - ranges are defined by how good the score is, not necessarily whether it's greater or less
      - ranges formatted as "worst:best" or ":worst/best:"
      - ranges must contain a ":", but do not require either an upper or lower bound
    - e.g., 
    - 
      - '"v positional :50" to see all words with a score worse than 50 with no lower bound'
      - '"v positional chose:" to see all words with a score at least as good as that of "chose"'
      - '"v positional :guess:" to see all words with a score equal to guess'
      - '"v positional :" to see all words'
  - name: results
    abbr: s
    msg:
    - for each word meeting the criteria specified in the query, displays 
    -
      - the word
      - its score according to the given evaluator
      - its rank out of the total number of options
  - name: list of evaluators
    abbr: l
    msg:
    - name: positionless
      abbr: s
      msg:
      - evaluates each letter of a potential guess based on how often it occurs in total
      - higher scores are better
    - name: positional
      abbr: l
      msg:
      - evaluates each letter of a potential guess based on how often it occurs in that position
      - higher scores are better
    - name: contextual
      abbr: c
      msg:
      - evaluates each letter of a potential guess based on how often it occurs 
      - preceded and followed by the letters that precede and follow it in the guess
      - higher scores are better
    - name: balancing
      abbr: b
      msg:
      - evaluates each letter of a potential guess based on
      - 'an attempt to balance how often that letter:'
      -
        - in that position
        - in any other position
        - in no positions
      - lower scores are better

- name: word
  abbr: w
  msg:
  - pass a 5 letter word to see it evaluated by all evaluators
  - displays the word along with its score and rank according to each evaluator
  - e.g., "w chose" to see data for "chose"
- name: expression
  abbr: x
  msg:
  - pass a string to match against words
  - optionally, also pass a set of letters to require to be included/excluded
  - name: fixed
    abbr: f
    msg:
    - shows a list of all words that match the pattern provided
    - e.g., "x \#_@" to get a list of all words whose second letter is a vowel
  - name: variable
    abbr: v
    msg:
    - shows a list of all letters ranked by how many matches they have
    - when that letter is plugged in for the variable token "?"
    - e.g., "x ?a" to see a list of letters ranked by how often they occur right before "a"
  - name: inclusion/exclusion
    abbr: c
    msg:
    - require that certain letters be either included or excluded
    - must come after the pattern to be matched
    - but the include and exclude sets may come in any order
    - name: include
      abbr: i
      msg:
      - included letters must be preceded with "+"
      - type a letter multiple times to require it be included that many times
      - e.g., "x _ +ll" to see all words with at least 2 "l"s
      - 
        - distinct from "x ll" in that the latter matches a sequence of 2 consecutive "l"s,
        - whereas the former matches words containing 2 "l"s anywhere
    - name: exclude
      abbr: e
      msg:
      - excluded letters must be preceded with "-"
      - e.g., "x _ -r" to see all words that do not contain "r"
  - name: patterns
    abbr: p
    msg:
    - 'patterns consist of:'
    -
      - normal letters
      - special tokens that match more general word elements
      - quantifiers
    - name: special tokens
      abbr: s
      msg:
      - name: generic
        abbr: _
        msg:
        - matches any letter
      - name: vowel
        abbr: '@'
        msg:
        - matches any vowel
        - '"a", "e", "i", "o", "u", and "y" are all vowels'
      - name: consonant
        abbr: $
        msg:
        - matches any consonant
        - any letter other than "a", "e", "i", "o", or "u" is a consonant
        - including "y"
      - name: word boundary
        abbr: '#'
        msg:
        - matches the beginning or end of a word
      - name: variable
        abbr: '?'
        msg:
        - matches any letter (like "_"), but alters the result type of query
        - see "h x v" for more information on variable queries
    - name: quantifiers
      abbr: q
      msg:
      - quantifiers cause the preceding token to match different numbers of instances
      -
        - '^: 0 or 1'
        - '&: 1 or more'
        - '*: 0 or more'